/*global module require console*/

// # Grunt Manifest Task
// This task builds the cache manifest file that's used by the browser to cache
// files for offline use
module.exports = function (grunt) {
  "use strict";

  grunt.registerMultiTask("manifest", "Generate HTML5 cache manifest", function () {

    // Load all the helpers and libraries
    var _ = grunt.utils._;
    var path = require('path');
    var helpers = require('grunt-contrib-lib').init(grunt);
    var options = helpers.options(this, { minimatch : {}});

    if (options.cwd) {
      options.minimatch.cwd = options.cwd;
    }

    var verbose = true;
    var done = this.async();
    var files = [];
    var destFile = options.cwd + this.file.dest;
    // ## Cache Manifest Header
    // The first line of the cache manifest must always be **CACHE MANIFEST**
    var contents = "CACHE MANIFEST\n";
    var excludeFiles = options.exclude;
    var cacheFiles = options.cache;

    // Expand all the files in the configured directories
    _.each(grunt.file.expand(options.minimatch, this.file.src), function(file) {

      // If this is a file and not a folder
      if (!grunt.util._.endsWith(file, path.sep)) {

        // Encode the path as a URI for web friendlyness (" " would become "%20")
        files.push(encodeURI(file));
      }
    });

    grunt.verbose.writeflags(options, "Options");

    // The "src" is required
    if (!this.file.src) {
      grunt.fatal("Need to specify source directory for the files.", 2);
    }

    // Set default destination file as "cache.manifest"
    if (!destFile) {
      destFile = "cache.manifest";
    }

    if (options.verbose) {
      contents += "# This manifest was generated by grunt-contrib-manifest HTML5 Cache Manifest Generator\n";
    }

    // ##Manifest Timestamp
    // If timestamp was true, add it to the file.  HTML5 app cache will only update the local cache
    // if the cache manifest has changed.  We almost always want to have a time stamp to force the
    // client to reload any static content that may have changed even though the cache manifest
    // did not
    if (options.timestamp) {
      contents += "# Time: " + new Date() + "\n";
    }

    // ##Cache Section
    // The resources listed under the cache section are explicitly cached for offline use.
    contents += "\nCACHE:\n";

    // Exclude files
    if (excludeFiles) {
      files = files.filter(function (item) {
        return excludeFiles.indexOf(item) === -1;
      });
    }

    // Add files to explicit cache manually
    if (cacheFiles) {
      cacheFiles.forEach(function (item) {
        contents += item + "\n";
      });
    }

    // Add files to explicit cache
    if (files) {
      files.forEach(function (item) {
        contents += item + "\n";
      });
    }

    // ##Network section
    // The resources listed under this section are never cached and are not available offline.
    // As a result an error will occur when an attempt is made offline to load the resource.
    if (options.network) {
      contents += "\nNETWORK:\n";
      options.network.forEach(function (item) {
        contents += item + "\n";
      });
    } else {
      // If there's no network section, add a default "*" wildcard
      contents += "\nNETWORK:\n";
      contents += "*\n";
    }

    // ##Fallback Section
    // The fallback section in a cache manifest file can be used to substitute online resources
    // that cannot be cached or were not cached successfully.
    if (options.fallback) {
      contents += "\nFALLBACK:\n";
      options.fallback.forEach(function (item) {
        contents += item + "\n";
      });
    }

    // ##Settings Section
    // The cache mode setting.  This consists of the string "prefer-online". It sets the cache
    // mode to `prefer-online`. (The cache mode defaults to fast.)
    //
    // * **prefer-online** will go to the server if there is a connection, even if the file is cached. If there is no connection it will use the cache.
    // * **fast** will use the offline version, even if there is a connection.

    // If the preferOnline option is set to true, add this to the manifest file
    if (options.preferOnline) {
      contents += "\nSETTINGS:\n";
      contents += "prefer-online\n";
    }

    // Write file to disk
    grunt.verbose.writeln("\n" + (contents).yellow);
    grunt.file.write(destFile, contents);
    done();
  });

  var detectDestType = function(dest) {
    if (grunt.util._.endsWith(dest, path.sep)) {
      return 'directory';
    } else {
      return 'file';
    }
  };

};